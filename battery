#!/usr/bin/env python
#
# Michele Campus <fci1908@gmail.com>
# 
# encoding: utf-8
#
# Alert you when battery status are low
#
# Dependencies: pygtk pynotify
#
# "batterypunish" is a python module that notify on the screen
# a message alert when the charge of battery is at 10 %.
# Use the 'pynotify' library to create and notify a small graphical notification
# on the screen.
#
#
import pygtk
pygtk.require('2.0')
import pynotify
import sys
import os.path
import time


#
# function to determine if power_supply use 
# charge_battery_props[] or energy_battery_props
#
def charge_or_energy():

    f = os.path.exists("/sys/class/power_supply/BAT0/charge_full")
    if f:
        full = "/sys/class/power_supply/BAT0/charge_full"
    else:
        full = "/sys/class/power_supply/BAT0/energy_full"
        
    f = os.path.exists("/sys/class/power_supply/BAT0/charge_now")
    if f:
        now = "/sys/class/power_supply/BAT0/charge_now"
    else:
        now = "/sys/class/power_supply/BAT0/energy_now"

    return (full, now)

#
# function to calculate the battery status (in percent)
# (located in BAT0 directory system)
#
def percent_battery_and_status():

    # call function to understand if the system use 'charge' or 'energy'
    full, now = charge_or_energy();

    s = "/sys/class/power_supply/BAT0/status"

    # read the file for full charge of the battery
    with open (full, "r") as myfile:
        max_charge = myfile.read()
        max_ch = float(max_charge)
        # print max_charge
    
    # read the file for current charge of the battery
    with open (now, "r") as myfile:
        curr = myfile.read()
        ch_now = float(curr)
        # print charge_now

    # read the file 'status' located in BAT0 directory system
    with open (s,"r") as myfile:
        status = myfile.read()
        # print status
            
    # calculate the real time percent of the battery
    percent = (ch_now / max_ch) * 100
    
    return (percent, status)
  
##
## MAIN
##
def main():

    msg_1 = "WARNING !!!"
    msg_2 = "Battery charge low. Please recharge immediately"
    loc = "/usr/share/pixmaps/punisher_icon.png"
    b_status = "Discharging\n"
    lev_down_batt = 10.0
    x = 3
    chk = False

    # infinite loop
    while(True):

        # call function percent_battery - return batery percent and the status
        batt, status = percent_battery_and_status()

        # check status and level of battery charge
        if status == b_status and batt <= lev_down_batt:
            
            # init pynotify
            if not pynotify.init("BATTERY"):
                sys.exit(1)

            # must notify - battery charge is low
            if not chk and x > 0:
                n = pynotify.Notification(msg_1, msg_2, loc)
                n.set_urgency(pynotify.URGENCY_CRITICAL)
                if not n.show():
                    print "Failed to send notification"
                    sys.exit(1)
                x -= 1
                time.sleep(10)
                if x == 0:
                    chk = True
        else:
            chk = False

        # control every 10 seconds
        time.sleep(10)

    return 0


if __name__ == '__main__':main()
